<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，作用是对sql进行分类化管理，理解sql隔离
注意：使用mapper代理开发，namespace有特殊作用
 -->
<mapper namespace="cn.itcast.mybatis.mapper.UserMapper">
<!-- 在映射文件中配置很多sql语句 -->
	<!-- 通过id查询用户表的记录 -->
	<!-- 通过select执行数据库查询 
	id用来标识映射文件中的sql，成为statement的id
	将sql语句封装到mappedStatement的id
	#{}标识一个占位符
	parameterType标识指定输入参数类型，这里指定int类型
	#{id}:其中id标识输入的参数，参数的名字就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以是value或其他名称
	resultType:指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成java对象	
	-->
	<select id="findUserById" parameterType="int" resultType="cn.itcast.mybatis.po.User">
			SELECT * FROM user WHERE id=#{value}
	</select>
	<!-- 根据用户名称模糊查询用户信息,可能返回多条 
	resultType:指定就是单条记录所映射的java对象类型-->
	<!-- ${}:表示拼接sql串，将接收到的参数的内容不加任何修饰拼接在sql中 
	使用${}拼接sql，引起sql注入
	${value}:接受输入参数的内容，如果传入类型是简单类型，${}中只能使用value
	-->
	<select id="findUserByName" parameterType="java.lang.String" resultType="cn.itcast.mybatis.po.User">
		SELECT * FROM user where username like '%${value}%'
	</select>
	
	<!-- 添加用户
	parameterType:指定输入参数类型为pojo （包括用户信息）
	#{}中指定pojo属性明，接收到pojo对象的属性值，mybatis通过ognl获取对象的属性值-->
	<insert id="insertUser" parameterType="cn.itcast.mybatis.po.User">
		<!-- 
		将出入数据的主键返回，返回到user对象中
		select LAST_INSERT_ID():得到刚insert进去记录的主键值，只适用于自增主键
		keyProperty：将查询到的主键值设置到parameterType指定对象的那个属性
		order: select LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
		resultType:指定select LAST_INSERT_ID()的结果类型。
		 -->
<!-- 		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer"> -->
<!-- 			select LAST_INSERT_ID() -->
<!-- 		</selectKey> -->
<!-- 		使用mysql的uuid()生成主键 -->
<!-- 		执行过程：首先通过uuid()得到主键，将主键设置到user对象的id属性中 -->
<!-- 		其次在insert执行时，从user对象中取出id属性值 -->
<!-- 		<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String"> -->
<!-- 			select uuid() -->
<!-- 		</selectKey> -->
<!-- 		insert into user(id,username,birthday,sex,address) value(#{id},#{username},#{birthday},#{sex},#{address}) -->
		insert into user(username,birthday,sex,address) value(#{username},#{birthday},#{sex},#{address})
	</insert>
	<!-- 删除用户 
	根据id删除用户，需要输入id值-->
	<delete id="deleteUser" parameterType="java.lang.Integer">
		delete from user where id=#{id}
	</delete>
	<!-- 更新用户
	根据id更新用户，需要输入id值,用户的更新信息 
	parameterType：指定user对象，包括id和更新信息，注意id值必须存在
	#{id}:从user对象中获取id的属性值
	-->
	<update id="updateUser" parameterType="cn.itcast.mybatis.po.User">
		update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
	</update>
</mapper>
